let blackjackGame;blackjackGame = {        'you': {'scoreSpan': '#your-blackjack-result', 'div': '#your-box', 'score': 0},        'dealer': {'scoreSpan': '#dealer-blackjack-result', 'div': '#dealer-box', 'score': 0},        'cards': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],        'cardsMap': {            '1': [1, 11],            '2': 2,            '3': 3,            '4': 4,            '5': 5,            '6': 6,            '7': 7,            '8': 8,            '9': 9,            '10': 10,            '11': 10,            '12': 10,            '13': 10        },//   dictionary works with values ; '11' integer to 10     'wins':0, // comma is needed if you want to add something so that it doesn't show error, if add something to it.        'losses':0,        'draws':0,        isStand :false,        'turnsOver':false,    };    const YOU = blackjackGame['you']    const DEALER = blackjackGame['dealer']    const hitSound = new Audio('./sounds/hit.mp3');    const winSound = new Audio('./sounds/win.mp3');    const lossSound = new Audio('./sounds/aww.mp3');    // const booSound = new Audio('./sounds/boo.mp3');    // const chatterSound = new Audio('./sounds/chatter.mp3');    document.querySelector('#blackjack-hit-button').addEventListener('click', blackjackHit);    document.querySelector('#blackjack-stand-button').addEventListener('click', dealerLogic);    document.querySelector('#blackjack-deal-button').addEventListener('click', blackjackDeal);function blackjackHit() {        if (blackjackGame['isStand'] === false){ // if stand mode is not actived then the hit button should work.            let card = randomCard();        showCard(card, YOU);// if you put here() YOU or DEALER it'll just show in your box or dealers but activePlayer will have it in both        updateScore(card, YOU);        showScore(YOU);  // NOT WORKING PROBLEM}}// function for randomly generating a numberfunction randomCard() {        let randomIndex = Math.floor(Math.random() * 13);        return blackjackGame['cards'][randomIndex]; // it'll access blackjackGame and take cards array and generate randomIndex randomly.    }function showCard(card, activePlayer) {  // (card) another argument called card        if (activePlayer['score'] <= 21) { // bust logic            let cardImage = document.createElement('img');            cardImage.src = `img/cards/${card}.jpg`; // to add more img backtick and {card}-> it makes it a variable ; also you can use string cancatication but string templating            document.querySelector(activePlayer['div']).appendChild(cardImage); // rather then YOU or DEALER new function activePlayer so tht it is dynamic            hitSound.play();        }}// DEAL : will help the cards go away and no need to refresh.function blackjackDeal() {    if (blackjackGame['turnsOver'] === true){        blackjackGame['isStand'] = false;        let yourImages = document.querySelector('#your-box').querySelectorAll('img'); //all the images in the box, it'll give all images. need a event listener see line 14. click blackjackDeal        let dealerImages = document.querySelector('#dealer-box').querySelectorAll('img');        // repetitive task use for loop        for (i = 0; i < yourImages.length; i++) {            yourImages[i].remove();        }        for (i = 0; i < dealerImages.length; i++) {            dealerImages[i].remove();        }        // To reset the score internally; reset the score and text color back to white        YOU['score'] = 0;        DEALER['score'] = 0;        document.querySelector('#your-blackjack-result').textContent = 0;// active player score        document.querySelector('#dealer-blackjack-result').textContent = 0;        document.querySelector('#your-blackjack-result').style.color = '#e6f1d6';        document.querySelector('#dealer-blackjack-result').style.color = '#e6f1d6';        document.querySelector('#dealer-blackjack-result').textContent = "Let's play";        document.querySelector('#dealer-blackjack-result').style.color = 'black';        blackjackGame['turnsOver'] = true;}}function updateScore(card, activePlayer) {        // If adding 11 keeps me below 21 , add 11. otherwise , add 1        if (card === '1') { // if card is Ace then this will happen            if (activePlayer['score'] + blackjackGame['cardsMap'][card] [1] <= 21) {                activePlayer['score'] += blackjackGame['cardsMap'][card] [1];            } else {                activePlayer['score'] += blackjackGame['cardsMap'][card] [0];            }        } else {            activePlayer['score'] += blackjackGame['cardsMap'][card]; // this will evaluate to the cardsmaps dictionary            // it'll update score and increment the player's score :- sikai tasvir ki 6:23m dek        }}function showScore(activePlayer) {        if (activePlayer['score'] > 21) { //  stop the score from going increase, BUST logic            document.querySelector(activePlayer['scoreSpan']).textContent = 'BUST!';            document.querySelector(activePlayer['scoreSpan']).style.color = 'red';        } else {            document.querySelector(activePlayer['scoreSpan']).textContent = activePlayer['score'];        }} function sleep(ms) {    return new Promise(resolve => setTimeout(resolve,ms)); }async function dealerLogic() { // code is not working linearly you can't work for a sec. IT'S RUNNING THE CODE AT THE SAME TIME.        blackjackDeal['isStand'] = true; // as you click stand button , the dealer logic will take place , stand statement is true    while (DEALER['score'] < 16 && blackjackGame['isStand'] === true) {        let card = randomCard();        showCard(card, DEALER);        updateScore(card, DEALER);        showScore(DEALER);        await sleep(1000);    }    blackjackGame['turnsOver'] = true;    let winner = computeWinner();    showResult(winner);    }// PROBLEM// compute winner and return who just won// update the wins , draws and losses    function computeWinner() {        let winner;        if (YOU ['score'] <= 21) {            // condition : higher score than dealer or when dealer busts but you're 21 or under            if (YOU['score'] > DEALER['score'] || (DEALER['score'] > 21)) {                blackjackGame['win']++;                console.log('You win!');                winner = YOU;            } else if (YOU['score'] < DEALER['score']) {                blackjackGame['losses']++;                winner = DEALER;            } else if (YOU['score'] === DEALER['score']) {                blackjackGame['draws']++;            }            // condition : WHEN user busts but dealer doesn't        } else if (YOU['score'] > 21 && DEALER['score'] <= 21) {            blackjackGame['losses']++;            winner = DEALER;            // condition : when user busts but dealer doesn't        } else if (YOU['score'] > 21 && DEALER['score'] > 21) {            blackjackGame['draws']++;        }        console.log(blackjackGame);        return winner;    }}// PROBLEMfunction showResult(winner) {        let message, messageColor;        if (blackjackGame['turnsOver'] === true){        if (winner === YOU) {            document.querySelector('#wins').textContent = blackjackGame['wins'];            message = 'You won!';            messageColor = 'gold';            winSound.play();        } else if (winner === DEALER) {            document.querySelector('#losses').textContent = blackjackGame['losses'];            message = 'You lost!';            messageColor = 'red';            lossSound.play();        } else {            document.querySelector('#drew').textContent = blackjackGame['drew'];            message = 'You drew!'            messageColor = 'black';        }        document.querySelector('#blackjack-result').textContent = message;        document.querySelector('#blackjack-result').style.color = messageColor;}}